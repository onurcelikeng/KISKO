import { Component, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, NgModule, Renderer, ViewContainerRef, forwardRef } from '@angular/core';
import { CommonModule, DOCUMENT } from '@angular/common';
import { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { Observable as Observable$1 } from 'rxjs/Observable';
import { Subscription as Subscription$1 } from 'rxjs/Subscription';
import 'rxjs/add/observable/fromEvent';
import 'rxjs/add/observable/merge';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/takeUntil';
import 'rxjs/add/operator/map';
import { addMonths, eachDay, endOfMonth, format, getDate, getDay, getMonth, getYear, isSameDay, isSameMonth, isSameYear, isToday, setDay, setYear, startOfMonth, subDays, subMonths } from 'date-fns';

var SlimScrollOptions = (function () {
    /**
     * @param {?=} obj
     */
    function SlimScrollOptions(obj) {
        this.position = obj && obj.position ? obj.position : 'right';
        this.barBackground = obj && obj.barBackground ? obj.barBackground : '#343a40';
        this.barOpacity = obj && obj.barOpacity ? obj.barOpacity : '1';
        this.barWidth = obj && obj.barWidth ? obj.barWidth : '12';
        this.barBorderRadius = obj && obj.barBorderRadius ? obj.barBorderRadius : '5';
        this.barMargin = obj && obj.barMargin ? obj.barMargin : '1px 0';
        this.gridBackground = obj && obj.gridBackground ? obj.gridBackground : '#adb5bd';
        this.gridOpacity = obj && obj.gridOpacity ? obj.gridOpacity : '1';
        this.gridWidth = obj && obj.gridWidth ? obj.gridWidth : '8';
        this.gridBorderRadius = obj && obj.gridBorderRadius ? obj.gridBorderRadius : '10';
        this.gridMargin = obj && obj.gridMargin ? obj.gridMargin : '1px 2px';
        this.alwaysVisible = obj && typeof obj.alwaysVisible !== 'undefined' ? obj.alwaysVisible : true;
        this.visibleTimeout = obj && obj.visibleTimeout ? obj.visibleTimeout : 1000;
        this.scrollSensitivity = obj && obj.scrollSensitivity ? obj.scrollSensitivity : 1;
    }
    return SlimScrollOptions;
}());
var easing = {
    linear: function (t) { return t; },
    inQuad: function (t) { return t * t; },
    outQuad: function (t) { return t * (2 - t); },
    inOutQuad: function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },
    inCubic: function (t) { return t * t * t; },
    outCubic: function (t) { return (--t) * t * t + 1; },
    inOutCubic: function (t) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },
    inQuart: function (t) { return t * t * t * t; },
    outQuart: function (t) { return 1 - (--t) * t * t * t; },
    inOutQuart: function (t) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; },
    inQuint: function (t) { return t * t * t * t * t; },
    outQuint: function (t) { return 1 + (--t) * t * t * t * t; },
    inOutQuint: function (t) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }
};
var SlimScrollDirective = (function () {
    /**
     * @param {?} viewContainer
     * @param {?} renderer
     * @param {?} document
     */
    function SlimScrollDirective(viewContainer, renderer, document) {
        var _this = this;
        this.viewContainer = viewContainer;
        this.renderer = renderer;
        this.document = document;
        this.interactionSubscriptions = new Subscription$1();
        this.initWheel = function () {
            var /** @type {?} */ dommousescroll = Observable$1.fromEvent(_this.el, 'DOMMouseScroll');
            var /** @type {?} */ mousewheel = Observable$1.fromEvent(_this.el, 'mousewheel');
            var /** @type {?} */ wheelSubscription = Observable$1.merge.apply(Observable$1, [dommousescroll, mousewheel]).subscribe(function (e) {
                var /** @type {?} */ scrollSensitivity = _this.options.scrollSensitivity / 100;
                var wheelDeltaY = e.wheelDeltaY;
                wheelDeltaY = (Math.sign(wheelDeltaY) === 1) ? Math.max(1, wheelDeltaY * scrollSensitivity) : Math.min(-1, wheelDeltaY * scrollSensitivity);
                _this.scrollContent(-wheelDeltaY, true, false);
                if (e.preventDefault) {
                    e.preventDefault();
                }
            });
            _this.interactionSubscriptions.add(wheelSubscription);
        };
        this.initDrag = function () {
            var /** @type {?} */ bar = _this.bar;
            var /** @type {?} */ mousemove = Observable$1.fromEvent(_this.document.documentElement, 'mousemove');
            var /** @type {?} */ touchmove = Observable$1.fromEvent(_this.document.documentElement, 'touchmove');
            var /** @type {?} */ mousedown = Observable$1.fromEvent(bar, 'mousedown');
            var /** @type {?} */ touchstart = Observable$1.fromEvent(_this.el, 'touchstart');
            var /** @type {?} */ mouseup = Observable$1.fromEvent(_this.document.documentElement, 'mouseup');
            var /** @type {?} */ touchend = Observable$1.fromEvent(_this.document.documentElement, 'touchend');
            var /** @type {?} */ mousedrag = mousedown.mergeMap(function (e) {
                _this.pageY = e.pageY;
                _this.top = parseFloat(getComputedStyle(bar).top);
                return mousemove.map(function (emove) {
                    emove.preventDefault();
                    return _this.top + emove.pageY - _this.pageY;
                }).takeUntil(mouseup);
            });
            var /** @type {?} */ touchdrag = touchstart.mergeMap(function (e) {
                _this.pageY = e.targetTouches[0].pageY;
                _this.top = -parseFloat(getComputedStyle(bar).top);
                return touchmove.map(function (tmove) {
                    return -(_this.top + tmove.targetTouches[0].pageY - _this.pageY);
                }).takeUntil(touchend);
            });
            var /** @type {?} */ dragSubscription = Observable$1.merge.apply(Observable$1, [mousedrag, touchdrag]).subscribe(function (top) {
                _this.body.addEventListener('selectstart', _this.preventDefaultEvent, false);
                _this.renderer.setElementStyle(_this.body, 'touch-action', 'pan-y');
                _this.renderer.setElementStyle(_this.body, 'user-select', 'none');
                _this.renderer.setElementStyle(_this.bar, 'top', top + "px");
                var /** @type {?} */ over = _this.scrollContent(0, true, false);
                var /** @type {?} */ maxTop = _this.el.offsetHeight - _this.bar.offsetHeight;
                if (over && over < 0 && -over <= maxTop) {
                    _this.renderer.setElementStyle(_this.el, 'paddingTop', -over + 'px');
                }
                else if (over && over > 0 && over <= maxTop) {
                    _this.renderer.setElementStyle(_this.el, 'paddingBottom', over + 'px');
                }
            });
            var /** @type {?} */ dragEndSubscription = Observable$1.merge.apply(Observable$1, [mouseup, touchend]).subscribe(function () {
                _this.body.removeEventListener('selectstart', _this.preventDefaultEvent, false);
                var /** @type {?} */ paddingTop = parseInt(_this.el.style.paddingTop, 10);
                var /** @type {?} */ paddingBottom = parseInt(_this.el.style.paddingBottom, 10);
                _this.renderer.setElementStyle(_this.body, 'touch-action', 'unset');
                _this.renderer.setElementStyle(_this.body, 'user-select', 'default');
                if (paddingTop > 0) {
                    _this.scrollTo(0, 300, 'linear');
                }
                else if (paddingBottom > 0) {
                    _this.scrollTo(0, 300, 'linear');
                }
            });
            _this.interactionSubscriptions.add(dragSubscription);
            _this.interactionSubscriptions.add(dragEndSubscription);
        };
        this.preventDefaultEvent = function (e) {
            e.preventDefault();
            e.stopPropagation();
        };
        this.viewContainer = viewContainer;
        this.el = viewContainer.element.nativeElement;
        this.body = this.document.querySelector('body');
        this.mutationThrottleTimeout = 50;
    }
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.options = new SlimScrollOptions(this.options);
        this.setElementStyle();
        this.wrapContainer();
        this.initGrid();
        this.initBar();
        this.getBarHeight();
        this.initWheel();
        this.initDrag();
        if (!this.options.alwaysVisible) {
            this.hideBarAndGrid();
        }
        if (MutationObserver) {
            this.mutationObserver = new MutationObserver(function () {
                if (_this.mutationThrottleTimeout) {
                    clearTimeout(_this.mutationThrottleTimeout);
                    _this.mutationThrottleTimeout = setTimeout(_this.onMutation.bind(_this), 50);
                }
            });
            this.mutationObserver.observe(this.el, { subtree: true, childList: true });
        }
        if (this.scrollEvents && this.scrollEvents instanceof EventEmitter) {
            var /** @type {?} */ scrollSubscription = this.scrollEvents.subscribe(function (event) { return _this.handleEvent(event); });
            this.interactionSubscriptions.add(scrollSubscription);
        }
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.ngOnDestroy = function () {
        this.interactionSubscriptions.unsubscribe();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SlimScrollDirective.prototype.handleEvent = function (e) {
        if (e.type === 'scrollToBottom') {
            var /** @type {?} */ y = this.el.scrollHeight - this.el.clientHeight;
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollToTop') {
            var /** @type {?} */ y = 0;
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollToPercent' && (e.percent >= 0 && e.percent <= 100)) {
            var /** @type {?} */ y = Math.round(((this.el.scrollHeight - this.el.clientHeight) / 100) * e.percent);
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollTo') {
            var /** @type {?} */ y = e.y;
            if (y <= this.el.scrollHeight - this.el.clientHeight && y >= 0) {
                this.scrollTo(y, e.duration, e.easing);
            }
        }
        else if (e.type === 'recalculate') {
            this.getBarHeight();
        }
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.setElementStyle = function () {
        var /** @type {?} */ el = this.el;
        this.renderer.setElementStyle(el, 'overflow', 'hidden');
        this.renderer.setElementStyle(el, 'position', 'relative');
        this.renderer.setElementStyle(el, 'display', 'block');
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.onMutation = function () {
        this.getBarHeight();
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.wrapContainer = function () {
        this.wrapper = this.renderer.createElement(this.el, 'div');
        var /** @type {?} */ wrapper = this.wrapper;
        var /** @type {?} */ el = this.el;
        this.renderer.setElementClass(wrapper, 'slimscroll-wrapper', true);
        this.renderer.setElementStyle(wrapper, 'position', 'relative');
        this.renderer.setElementStyle(wrapper, 'overflow', 'hidden');
        this.renderer.setElementStyle(wrapper, 'display', 'inline-block');
        this.renderer.setElementStyle(wrapper, 'margin', getComputedStyle(el).margin);
        this.renderer.setElementStyle(wrapper, 'width', '100%');
        this.renderer.setElementStyle(wrapper, 'height', getComputedStyle(el).height);
        el.parentNode.insertBefore(wrapper, el);
        wrapper.appendChild(el);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.initGrid = function () {
        this.grid = this.renderer.createElement(this.el, 'div');
        var /** @type {?} */ grid = this.grid;
        this.renderer.setElementClass(grid, 'slimscroll-grid', true);
        this.renderer.setElementStyle(grid, 'position', 'absolute');
        this.renderer.setElementStyle(grid, 'top', '0');
        this.renderer.setElementStyle(grid, 'bottom', '0');
        this.renderer.setElementStyle(grid, this.options.position, '0');
        this.renderer.setElementStyle(grid, 'width', this.options.gridWidth + "px");
        this.renderer.setElementStyle(grid, 'background', this.options.gridBackground);
        this.renderer.setElementStyle(grid, 'opacity', this.options.gridOpacity);
        this.renderer.setElementStyle(grid, 'display', 'block');
        this.renderer.setElementStyle(grid, 'cursor', 'pointer');
        this.renderer.setElementStyle(grid, 'z-index', '99');
        this.renderer.setElementStyle(grid, 'border-radius', this.options.gridBorderRadius + "px");
        this.renderer.setElementStyle(grid, 'margin', this.options.gridMargin);
        this.wrapper.appendChild(grid);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.initBar = function () {
        this.bar = this.renderer.createElement(this.el, 'div');
        var /** @type {?} */ bar = this.bar;
        this.renderer.setElementClass(bar, 'slimscroll-bar', true);
        this.renderer.setElementStyle(bar, 'position', 'absolute');
        this.renderer.setElementStyle(bar, 'top', '0');
        this.renderer.setElementStyle(bar, this.options.position, '0');
        this.renderer.setElementStyle(bar, 'width', this.options.barWidth + "px");
        this.renderer.setElementStyle(bar, 'background', this.options.barBackground);
        this.renderer.setElementStyle(bar, 'opacity', this.options.barOpacity);
        this.renderer.setElementStyle(bar, 'display', 'block');
        this.renderer.setElementStyle(bar, 'cursor', 'pointer');
        this.renderer.setElementStyle(bar, 'z-index', '100');
        this.renderer.setElementStyle(bar, 'border-radius', this.options.barBorderRadius + "px");
        this.renderer.setElementStyle(bar, 'margin', this.options.barMargin);
        this.wrapper.appendChild(bar);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.getBarHeight = function () {
        var /** @type {?} */ barHeight = Math.max((this.el.offsetHeight / this.el.scrollHeight) * this.el.offsetHeight, 30) + 'px';
        var /** @type {?} */ display = parseInt(barHeight, 10) === this.el.offsetHeight ? 'none' : 'block';
        this.renderer.setElementStyle(this.bar, 'height', barHeight);
        this.renderer.setElementStyle(this.bar, 'display', display);
        this.renderer.setElementStyle(this.grid, 'display', display);
    };
    /**
     * @param {?} y
     * @param {?} duration
     * @param {?} easingFunc
     * @return {?}
     */
    SlimScrollDirective.prototype.scrollTo = function (y, duration, easingFunc) {
        var _this = this;
        var /** @type {?} */ start = Date.now();
        var /** @type {?} */ from = this.el.scrollTop;
        var /** @type {?} */ maxTop = this.el.offsetHeight - this.bar.offsetHeight;
        var /** @type {?} */ maxElScrollTop = this.el.scrollHeight - this.el.clientHeight;
        var /** @type {?} */ barHeight = Math.max((this.el.offsetHeight / this.el.scrollHeight) * this.el.offsetHeight, 30);
        var /** @type {?} */ paddingTop = parseInt(this.el.style.paddingTop, 10) || 0;
        var /** @type {?} */ paddingBottom = parseInt(this.el.style.paddingBottom, 10) || 0;
        var /** @type {?} */ scroll = function (timestamp) {
            var /** @type {?} */ currentTime = Date.now();
            var /** @type {?} */ time = Math.min(1, ((currentTime - start) / duration));
            var /** @type {?} */ easedTime = easing[easingFunc](time);
            if (paddingTop > 0 || paddingBottom > 0) {
                var /** @type {?} */ fromY = null;
                if (paddingTop > 0) {
                    fromY = -paddingTop;
                    fromY = -((easedTime * (y - fromY)) + fromY);
                    _this.renderer.setElementStyle(_this.el, 'paddingTop', fromY + "px");
                }
                if (paddingBottom > 0) {
                    fromY = paddingBottom;
                    fromY = ((easedTime * (y - fromY)) + fromY);
                    _this.renderer.setElementStyle(_this.el, 'paddingBottom', fromY + "px");
                }
            }
            else {
                _this.el.scrollTop = (easedTime * (y - from)) + from;
            }
            var /** @type {?} */ percentScroll = _this.el.scrollTop / maxElScrollTop;
            if (paddingBottom === 0) {
                var /** @type {?} */ delta = Math.round(Math.round(_this.el.clientHeight * percentScroll) - barHeight);
                if (delta > 0) {
                    _this.renderer.setElementStyle(_this.bar, 'top', delta + "px");
                }
            }
            if (time < 1) {
                requestAnimationFrame(scroll);
            }
        };
        requestAnimationFrame(scroll);
    };
    /**
     * @param {?} y
     * @param {?} isWheel
     * @param {?} isJump
     * @return {?}
     */
    SlimScrollDirective.prototype.scrollContent = function (y, isWheel, isJump) {
        var _this = this;
        var /** @type {?} */ delta = y;
        var /** @type {?} */ maxTop = this.el.offsetHeight - this.bar.offsetHeight;
        var /** @type {?} */ percentScroll;
        var /** @type {?} */ over = null;
        if (isWheel) {
            delta = parseInt(getComputedStyle(this.bar).top, 10) + y * 20 / 100 * this.bar.offsetHeight;
            if (delta < 0 || delta > maxTop) {
                over = delta > maxTop ? delta - maxTop : delta;
            }
            delta = Math.min(Math.max(delta, 0), maxTop);
            delta = (y > 0) ? Math.ceil(delta) : Math.floor(delta);
            this.renderer.setElementStyle(this.bar, 'top', delta + 'px');
        }
        percentScroll = parseInt(getComputedStyle(this.bar).top, 10) / (this.el.offsetHeight - this.bar.offsetHeight);
        delta = percentScroll * (this.el.scrollHeight - this.el.offsetHeight);
        this.el.scrollTop = delta;
        this.showBarAndGrid();
        if (!this.options.alwaysVisible) {
            if (this.visibleTimeout) {
                clearTimeout(this.visibleTimeout);
            }
            this.visibleTimeout = setTimeout(function () {
                _this.hideBarAndGrid();
            }, this.options.visibleTimeout);
        }
        return over;
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.showBarAndGrid = function () {
        this.renderer.setElementStyle(this.grid, 'background', this.options.gridBackground);
        this.renderer.setElementStyle(this.bar, 'background', this.options.barBackground);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.hideBarAndGrid = function () {
        this.renderer.setElementStyle(this.grid, 'background', 'transparent');
        this.renderer.setElementStyle(this.bar, 'background', 'transparent');
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.destroy = function () {
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = null;
        }
        if (this.el.parentElement.classList.contains('slimscroll-wrapper')) {
            var /** @type {?} */ wrapper = this.el.parentElement;
            var /** @type {?} */ bar = this.el.querySelector('.slimscroll-bar');
            this.el.removeChild(bar);
            this.unwrap(wrapper);
        }
    };
    /**
     * @param {?} wrapper
     * @return {?}
     */
    SlimScrollDirective.prototype.unwrap = function (wrapper) {
        var /** @type {?} */ docFrag = document.createDocumentFragment();
        while (wrapper.firstChild) {
            var /** @type {?} */ child = wrapper.removeChild(wrapper.firstChild);
            docFrag.appendChild(child);
        }
        wrapper.parentNode.replaceChild(docFrag, wrapper);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SlimScrollDirective.prototype.onResize = function ($event) {
        this.getBarHeight();
    };
    return SlimScrollDirective;
}());
SlimScrollDirective.decorators = [
    { type: Directive, args: [{
                selector: '[slimScroll]',
                exportAs: 'slimScroll'
            },] },
];
/**
 * @nocollapse
 */
SlimScrollDirective.ctorParameters = function () { return [
    { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] },] },
    { type: Renderer, decorators: [{ type: Inject, args: [Renderer,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
]; };
SlimScrollDirective.propDecorators = {
    'options': [{ type: Input },],
    'scrollEvents': [{ type: Input },],
    'onResize': [{ type: HostListener, args: ['window:resize', ['$event'],] },],
};
var NgSlimScrollModule = (function () {
    function NgSlimScrollModule() {
    }
    return NgSlimScrollModule;
}());
NgSlimScrollModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SlimScrollDirective
                ],
                exports: [
                    SlimScrollDirective
                ]
            },] },
];
/**
 * @nocollapse
 */
NgSlimScrollModule.ctorParameters = function () { return []; };

/**
 * Internal library helper that helps to check if value is empty
 * @param value
 */
const isNil = (value) => {
    return (typeof value === 'undefined') || (value === null);
};
class NgDatepickerComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * Disable datepicker's input
         */
        this.headless = false;
        /**
         * Set datepicker's visibility state
         */
        this.isOpened = false;
        /**
         * Datepicker dropdown position
         */
        this.position = 'bottom-right';
        this.positions = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
        this.onTouchedCallback = () => { };
        this.onChangeCallback = () => { };
        this.scrollOptions = {
            barBackground: '#DFE3E9',
            gridBackground: '#FFFFFF',
            barBorderRadius: '3',
            gridBorderRadius: '3',
            barWidth: '6',
            gridWidth: '6',
            barMargin: '0',
            gridMargin: '0'
        };
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this.innerValue = val;
        this.onChangeCallback(this.innerValue);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.view = 'days';
        this.date = new Date();
        this.setOptions();
        this.initDayNames();
        this.initYears();
        // Check if 'position' property is correct
        if (this.positions.indexOf(this.position) === -1) {
            throw new TypeError(`ng-datepicker: invalid position property value '${this.position}' (expected: ${this.positions.join(', ')})`);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('options' in changes) {
            this.setOptions();
            this.initDayNames();
            this.init();
            this.initYears();
        }
    }
    /**
     * @return {?}
     */
    setOptions() {
        const /** @type {?} */ today = new Date(); // this const was added because during my tests, I noticed that at this level this.date is undefined
        this.minYear = this.options && this.options.minYear || getYear(today) - 30;
        this.maxYear = this.options && this.options.maxYear || getYear(today) + 30;
        this.displayFormat = this.options && this.options.displayFormat || 'MMM D[,] YYYY';
        this.barTitleFormat = this.options && this.options.barTitleFormat || 'MMMM YYYY';
        this.dayNamesFormat = this.options && this.options.dayNamesFormat || 'ddd';
        this.barTitleIfEmpty = this.options && this.options.barTitleIfEmpty || 'Click to select a date';
        this.firstCalendarDay = this.options && this.options.firstCalendarDay || 0;
        this.locale = this.options && { locale: this.options.locale } || {};
    }
    /**
     * @return {?}
     */
    nextMonth() {
        this.date = addMonths(this.date, 1);
        this.init();
    }
    /**
     * @return {?}
     */
    prevMonth() {
        this.date = subMonths(this.date, 1);
        this.init();
    }
    /**
     * @param {?} i
     * @return {?}
     */
    setDate(i) {
        this.date = this.days[i].date;
        this.value = this.date;
        this.init();
        this.close();
    }
    /**
     * @param {?} i
     * @return {?}
     */
    setYear(i) {
        this.date = setYear(this.date, this.years[i].year);
        this.init();
        this.initYears();
        this.view = 'days';
    }
    /**
     * Checks if specified date is in range of min and max dates
     * @param {?} date
     * @return {?}
     */
    isDateSelectable(date) {
        if (isNil(this.options)) {
            return true;
        }
        const /** @type {?} */ minDateSet = !isNil(this.options.minDate);
        const /** @type {?} */ maxDateSet = !isNil(this.options.maxDate);
        const /** @type {?} */ timestamp = date.valueOf();
        if (minDateSet && (timestamp < this.options.minDate.valueOf())) {
            return false;
        }
        if (maxDateSet && (timestamp > this.options.maxDate.valueOf())) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    init() {
        const /** @type {?} */ start = startOfMonth(this.date);
        const /** @type {?} */ end = endOfMonth(this.date);
        this.days = eachDay(start, end).map(date => {
            return {
                date: date,
                day: getDate(date),
                month: getMonth(date),
                year: getYear(date),
                inThisMonth: true,
                isToday: isToday(date),
                isSelected: isSameDay(date, this.innerValue) && isSameMonth(date, this.innerValue) && isSameYear(date, this.innerValue),
                isSelectable: this.isDateSelectable(date)
            };
        });
        const /** @type {?} */ tmp = getDay(start) - this.firstCalendarDay;
        const /** @type {?} */ prevDays = tmp < 0 ? 7 - this.firstCalendarDay : tmp;
        for (let /** @type {?} */ i = 1; i <= prevDays; i++) {
            const /** @type {?} */ date = subDays(start, i);
            this.days.unshift({
                date: date,
                day: getDate(date),
                month: getMonth(date),
                year: getYear(date),
                inThisMonth: false,
                isToday: isToday(date),
                isSelected: isSameDay(date, this.innerValue) && isSameMonth(date, this.innerValue) && isSameYear(date, this.innerValue),
                isSelectable: this.isDateSelectable(date)
            });
        }
        this.displayValue = this.innerValue ? format(this.innerValue, this.displayFormat, this.locale) : '';
        this.barTitle = this.innerValue ? format(start, this.barTitleFormat, this.locale) : this.barTitleIfEmpty;
    }
    /**
     * @return {?}
     */
    initYears() {
        const /** @type {?} */ range = this.maxYear - this.minYear;
        this.years = Array.from(new Array(range), (x, i) => i + this.minYear).map(year => {
            return { year: year, isThisYear: year === getYear(this.date) };
        });
    }
    /**
     * @return {?}
     */
    initDayNames() {
        this.dayNames = [];
        const /** @type {?} */ start = this.firstCalendarDay;
        for (let /** @type {?} */ i = start; i <= 6 + start; i++) {
            const /** @type {?} */ date = setDay(new Date(), i);
            this.dayNames.push(format(date, this.dayNamesFormat, this.locale));
        }
    }
    /**
     * @return {?}
     */
    toggleView() {
        this.view = this.view === 'days' ? 'years' : 'days';
    }
    /**
     * @return {?}
     */
    toggle() {
        this.isOpened = !this.isOpened;
    }
    /**
     * @return {?}
     */
    close() {
        this.isOpened = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.date = val;
            this.innerValue = val;
            this.init();
            this.displayValue = format(this.innerValue, this.displayFormat, this.locale);
            this.barTitle = format(startOfMonth(val), this.barTitleFormat, this.locale);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onBlur(e) {
        if (!this.isOpened) {
            return;
        }
        const /** @type {?} */ input = this.elementRef.nativeElement.querySelector('.ngx-datepicker-input');
        if (input == null) {
            return;
        }
        if (e.target === input || input.contains(/** @type {?} */ (e.target))) {
            return;
        }
        const /** @type {?} */ container = this.elementRef.nativeElement.querySelector('.ngx-datepicker-calendar-container');
        if (container && container !== e.target && !container.contains(/** @type {?} */ (e.target)) && !((e.target)).classList.contains('year-unit')) {
            this.close();
        }
    }
}
NgDatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-datepicker',
                template: `
    <div class="ngx-datepicker-container">
      <input type="text" *ngIf="!headless" class="ngx-datepicker-input" [(ngModel)]="displayValue" readonly (click)="toggle()">
      <ng-content></ng-content>
      <div class="ngx-datepicker-calendar-container ngx-datepicker-position-{{position}}" *ngIf="isOpened">
        <div class="topbar-container">
          <svg width="7px" height="10px" viewBox="0 0 7 10" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" (click)="prevMonth()">
            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
              <g transform="translate(-923.000000, -1882.000000)" fill="#CED0DA">
                <g transform="translate(80.000000, 1361.000000)">
                  <g transform="translate(0.000000, 430.000000)">
                    <g transform="translate(825.000000, 0.000000)">
                      <g transform="translate(0.000000, 72.000000)">
                        <g transform="translate(18.000000, 15.000000)">
                          <polygon id="Back" points="6.015 4 0 9.013 6.015 14.025"></polygon>
                        </g>
                      </g>
                    </g>
                  </g>
                </g>
              </g>
            </g>
          </svg>
          <span class="topbar-title" (click)="toggleView()">{{ barTitle }}</span>
          <svg width="7px" height="10px" viewBox="0 0 6 10" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" (click)="nextMonth()">
            <g id="Source-Sans---UI-Elements-Kit" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
              <g id="White-Layout" transform="translate(-1182.000000, -1882.000000)" fill="#CED0DA">
                <g id="Dropdowns-&amp;-Selector" transform="translate(80.000000, 1361.000000)">
                  <g id="Dropdowns" transform="translate(0.000000, 430.000000)">
                    <g id="Calendar" transform="translate(825.000000, 0.000000)">
                      <g transform="translate(0.000000, 72.000000)" id="Top-Bar-Nav">
                        <g transform="translate(18.000000, 15.000000)">
                          <polygon id="Forward" transform="translate(262.007500, 9.012500) scale(-1, 1) translate(-262.007500, -9.012500) " points="265.015 4 259 9.013 265.015 14.025"></polygon>
                        </g>
                      </g>
                    </g>
                  </g>
                </g>
              </g>
            </g>
          </svg>
        </div>
        <div class="main-calendar-container" *ngIf="view === 'days'">
          <div class="main-calendar-day-names">
            <span class="day-name-unit" *ngFor="let name of dayNames">{{ name }}</span>
          </div>
          <div class="main-calendar-days">
            <span
              class="day-unit"
              *ngFor="let day of days; let i = index;"
              [ngClass]="{ 'is-prev-month': !day.inThisMonth, 'is-today': day.isToday, 'is-selected': day.isSelected, 'is-disabled': !day.isSelectable }"
              (click)="day.isSelectable && setDate(i)"
            >
              {{ day.day }}
            </span>
          </div>
        </div>
        <div class="main-calendar-container" *ngIf="view === 'years'">
          <div class="main-calendar-years" slimScroll [options]="scrollOptions">
            <span class="year-unit" *ngFor="let year of years; let i = index;" [ngClass]="{ 'is-selected': year.isThisYear }" (click)="setYear(i)">{{ year.year }}</span>
          </div>
        </div>
      </div>
    </div>
  `,
                styles: [`
    .ngx-datepicker-position-bottom-left {
      top: 40px;
      right: 0; }

    .ngx-datepicker-position-bottom-right {
      top: 40px;
      left: 0; }

    .ngx-datepicker-position-top-left {
      bottom: 40px;
      right: 0; }

    .ngx-datepicker-position-top-right {
      bottom: 40px;
      left: 0; }

    .ngx-datepicker-container {
      position: relative; }
      .ngx-datepicker-container .ngx-datepicker-input {
        padding: 5px 10px;
        font-size: 14px;
        width: 200px;
        outline: none;
        border: 1px solid #DFE3E9; }
      .ngx-datepicker-container .ngx-datepicker-calendar-container {
        position: absolute;
        width: 300px;
        background: #ffffff;
        -webkit-box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.08);
                box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.08);
        border: 1px solid #DFE3E9;
        border-radius: 4px; }
        .ngx-datepicker-container .ngx-datepicker-calendar-container .topbar-container {
          width: 100%;
          height: 50px;
          padding: 15px;
          border-bottom: 1px solid #DFE3E9;
          display: -webkit-box;
          display: -ms-flexbox;
          display: flex;
          -webkit-box-pack: justify;
              -ms-flex-pack: justify;
                  justify-content: space-between;
          -webkit-box-align: center;
              -ms-flex-align: center;
                  align-items: center;
          -webkit-user-select: none;
             -moz-user-select: none;
              -ms-user-select: none;
                  user-select: none; }
          .ngx-datepicker-container .ngx-datepicker-calendar-container .topbar-container svg {
            cursor: pointer; }
            .ngx-datepicker-container .ngx-datepicker-calendar-container .topbar-container svg g {
              fill: #CED0DA; }
          .ngx-datepicker-container .ngx-datepicker-calendar-container .topbar-container .topbar-title {
            color: #3D495C;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer; }
        .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container {
          width: 100%;
          height: 100%;
          padding: 15px 10px 0;
          font-size: 12px;
          font-weight: 500; }
          .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-day-names {
            color: #A4A9B1;
            width: 100%;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-align: center;
                -ms-flex-align: center;
                    align-items: center; }
            .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-day-names .day-name-unit {
              width: calc(100% / 7);
              text-transform: uppercase;
              text-align: center; }
          .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years {
            padding: 15px 0;
            width: 100%;
            display: inline-block;
            max-height: 275px;
            overflow: hidden; }
            .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit {
              width: calc(100% / 7);
              height: 40px;
              display: -webkit-inline-box;
              display: -ms-inline-flexbox;
              display: inline-flex;
              float: left;
              -webkit-box-align: center;
                  -ms-flex-align: center;
                      align-items: center;
              -webkit-box-pack: center;
                  -ms-flex-pack: center;
                      justify-content: center;
              cursor: pointer;
              -webkit-user-select: none;
                 -moz-user-select: none;
                  -ms-user-select: none;
                      user-select: none;
              border-radius: 50%;
              color: #3D495C; }
              .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit.is-prev-month, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit.is-prev-month, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit.is-prev-month, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit.is-prev-month {
                color: #A4A9B1; }
              .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit.is-today, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit.is-today, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit.is-today, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit.is-today {
                background: #A4A9B1;
                color: #ffffff; }
              .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit.is-selected, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit.is-selected, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit.is-selected, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit.is-selected {
                background: #1A91EB;
                color: #ffffff; }
              .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit.is-disabled, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit.is-disabled, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit.is-disabled, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit.is-disabled {
                cursor: not-allowed;
                color: #A4A9B1; }
                .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit.is-disabled:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit.is-disabled:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit.is-disabled:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit.is-disabled:hover {
                  background: transparent; }
          .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years {
            height: 210px;
            display: block;
            padding: 0; }
            .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit {
              width: calc(100% / 3);
              border-radius: 10px; }
  `],
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgDatepickerComponent), multi: true }
                ]
            },] },
];
/**
 * @nocollapse
 */
NgDatepickerComponent.ctorParameters = () => [
    { type: ElementRef, },
];
NgDatepickerComponent.propDecorators = {
    'options': [{ type: Input },],
    'headless': [{ type: Input },],
    'isOpened': [{ type: Input },],
    'position': [{ type: Input },],
    'onBlur': [{ type: HostListener, args: ['document:click', ['$event'],] },],
};

class NgDatepickerModule {
}
NgDatepickerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgDatepickerComponent],
                imports: [CommonModule, FormsModule, NgSlimScrollModule],
                exports: [NgDatepickerComponent, CommonModule, FormsModule, NgSlimScrollModule]
            },] },
];
/**
 * @nocollapse
 */
NgDatepickerModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { NgDatepickerModule, NgDatepickerComponent };
//# sourceMappingURL=ng2-datepicker.js.map
