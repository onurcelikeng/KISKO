(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('rxjs/Observable'), require('rxjs/Subscription'), require('rxjs/add/observable/fromEvent'), require('rxjs/add/observable/merge'), require('rxjs/add/operator/mergeMap'), require('rxjs/add/operator/takeUntil'), require('rxjs/add/operator/map'), require('date-fns')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/forms', 'rxjs/Observable', 'rxjs/Subscription', 'rxjs/add/observable/fromEvent', 'rxjs/add/observable/merge', 'rxjs/add/operator/mergeMap', 'rxjs/add/operator/takeUntil', 'rxjs/add/operator/map', 'date-fns'], factory) :
	(factory((global['ng2-datepicker'] = {}),global.ng.core,global.ng.common,global.ng.forms,global.Rx,global.Rx,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.dateFns));
}(this, (function (exports,core,common,forms,Observable,Subscription,fromEvent,merge,mergeMap,takeUntil,map,dateFns) { 'use strict';

var SlimScrollOptions = (function () {
    /**
     * @param {?=} obj
     */
    function SlimScrollOptions(obj) {
        this.position = obj && obj.position ? obj.position : 'right';
        this.barBackground = obj && obj.barBackground ? obj.barBackground : '#343a40';
        this.barOpacity = obj && obj.barOpacity ? obj.barOpacity : '1';
        this.barWidth = obj && obj.barWidth ? obj.barWidth : '12';
        this.barBorderRadius = obj && obj.barBorderRadius ? obj.barBorderRadius : '5';
        this.barMargin = obj && obj.barMargin ? obj.barMargin : '1px 0';
        this.gridBackground = obj && obj.gridBackground ? obj.gridBackground : '#adb5bd';
        this.gridOpacity = obj && obj.gridOpacity ? obj.gridOpacity : '1';
        this.gridWidth = obj && obj.gridWidth ? obj.gridWidth : '8';
        this.gridBorderRadius = obj && obj.gridBorderRadius ? obj.gridBorderRadius : '10';
        this.gridMargin = obj && obj.gridMargin ? obj.gridMargin : '1px 2px';
        this.alwaysVisible = obj && typeof obj.alwaysVisible !== 'undefined' ? obj.alwaysVisible : true;
        this.visibleTimeout = obj && obj.visibleTimeout ? obj.visibleTimeout : 1000;
        this.scrollSensitivity = obj && obj.scrollSensitivity ? obj.scrollSensitivity : 1;
    }
    return SlimScrollOptions;
}());
var easing = {
    linear: function (t) { return t; },
    inQuad: function (t) { return t * t; },
    outQuad: function (t) { return t * (2 - t); },
    inOutQuad: function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },
    inCubic: function (t) { return t * t * t; },
    outCubic: function (t) { return (--t) * t * t + 1; },
    inOutCubic: function (t) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },
    inQuart: function (t) { return t * t * t * t; },
    outQuart: function (t) { return 1 - (--t) * t * t * t; },
    inOutQuart: function (t) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; },
    inQuint: function (t) { return t * t * t * t * t; },
    outQuint: function (t) { return 1 + (--t) * t * t * t * t; },
    inOutQuint: function (t) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }
};
var SlimScrollDirective = (function () {
    /**
     * @param {?} viewContainer
     * @param {?} renderer
     * @param {?} document
     */
    function SlimScrollDirective(viewContainer, renderer, document) {
        var _this = this;
        this.viewContainer = viewContainer;
        this.renderer = renderer;
        this.document = document;
        this.interactionSubscriptions = new Subscription.Subscription();
        this.initWheel = function () {
            var /** @type {?} */ dommousescroll = Observable.Observable.fromEvent(_this.el, 'DOMMouseScroll');
            var /** @type {?} */ mousewheel = Observable.Observable.fromEvent(_this.el, 'mousewheel');
            var /** @type {?} */ wheelSubscription = Observable.Observable.merge.apply(Observable.Observable, [dommousescroll, mousewheel]).subscribe(function (e) {
                var /** @type {?} */ scrollSensitivity = _this.options.scrollSensitivity / 100;
                var wheelDeltaY = e.wheelDeltaY;
                wheelDeltaY = (Math.sign(wheelDeltaY) === 1) ? Math.max(1, wheelDeltaY * scrollSensitivity) : Math.min(-1, wheelDeltaY * scrollSensitivity);
                _this.scrollContent(-wheelDeltaY, true, false);
                if (e.preventDefault) {
                    e.preventDefault();
                }
            });
            _this.interactionSubscriptions.add(wheelSubscription);
        };
        this.initDrag = function () {
            var /** @type {?} */ bar = _this.bar;
            var /** @type {?} */ mousemove = Observable.Observable.fromEvent(_this.document.documentElement, 'mousemove');
            var /** @type {?} */ touchmove = Observable.Observable.fromEvent(_this.document.documentElement, 'touchmove');
            var /** @type {?} */ mousedown = Observable.Observable.fromEvent(bar, 'mousedown');
            var /** @type {?} */ touchstart = Observable.Observable.fromEvent(_this.el, 'touchstart');
            var /** @type {?} */ mouseup = Observable.Observable.fromEvent(_this.document.documentElement, 'mouseup');
            var /** @type {?} */ touchend = Observable.Observable.fromEvent(_this.document.documentElement, 'touchend');
            var /** @type {?} */ mousedrag = mousedown.mergeMap(function (e) {
                _this.pageY = e.pageY;
                _this.top = parseFloat(getComputedStyle(bar).top);
                return mousemove.map(function (emove) {
                    emove.preventDefault();
                    return _this.top + emove.pageY - _this.pageY;
                }).takeUntil(mouseup);
            });
            var /** @type {?} */ touchdrag = touchstart.mergeMap(function (e) {
                _this.pageY = e.targetTouches[0].pageY;
                _this.top = -parseFloat(getComputedStyle(bar).top);
                return touchmove.map(function (tmove) {
                    return -(_this.top + tmove.targetTouches[0].pageY - _this.pageY);
                }).takeUntil(touchend);
            });
            var /** @type {?} */ dragSubscription = Observable.Observable.merge.apply(Observable.Observable, [mousedrag, touchdrag]).subscribe(function (top) {
                _this.body.addEventListener('selectstart', _this.preventDefaultEvent, false);
                _this.renderer.setElementStyle(_this.body, 'touch-action', 'pan-y');
                _this.renderer.setElementStyle(_this.body, 'user-select', 'none');
                _this.renderer.setElementStyle(_this.bar, 'top', top + "px");
                var /** @type {?} */ over = _this.scrollContent(0, true, false);
                var /** @type {?} */ maxTop = _this.el.offsetHeight - _this.bar.offsetHeight;
                if (over && over < 0 && -over <= maxTop) {
                    _this.renderer.setElementStyle(_this.el, 'paddingTop', -over + 'px');
                }
                else if (over && over > 0 && over <= maxTop) {
                    _this.renderer.setElementStyle(_this.el, 'paddingBottom', over + 'px');
                }
            });
            var /** @type {?} */ dragEndSubscription = Observable.Observable.merge.apply(Observable.Observable, [mouseup, touchend]).subscribe(function () {
                _this.body.removeEventListener('selectstart', _this.preventDefaultEvent, false);
                var /** @type {?} */ paddingTop = parseInt(_this.el.style.paddingTop, 10);
                var /** @type {?} */ paddingBottom = parseInt(_this.el.style.paddingBottom, 10);
                _this.renderer.setElementStyle(_this.body, 'touch-action', 'unset');
                _this.renderer.setElementStyle(_this.body, 'user-select', 'default');
                if (paddingTop > 0) {
                    _this.scrollTo(0, 300, 'linear');
                }
                else if (paddingBottom > 0) {
                    _this.scrollTo(0, 300, 'linear');
                }
            });
            _this.interactionSubscriptions.add(dragSubscription);
            _this.interactionSubscriptions.add(dragEndSubscription);
        };
        this.preventDefaultEvent = function (e) {
            e.preventDefault();
            e.stopPropagation();
        };
        this.viewContainer = viewContainer;
        this.el = viewContainer.element.nativeElement;
        this.body = this.document.querySelector('body');
        this.mutationThrottleTimeout = 50;
    }
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.options = new SlimScrollOptions(this.options);
        this.setElementStyle();
        this.wrapContainer();
        this.initGrid();
        this.initBar();
        this.getBarHeight();
        this.initWheel();
        this.initDrag();
        if (!this.options.alwaysVisible) {
            this.hideBarAndGrid();
        }
        if (MutationObserver) {
            this.mutationObserver = new MutationObserver(function () {
                if (_this.mutationThrottleTimeout) {
                    clearTimeout(_this.mutationThrottleTimeout);
                    _this.mutationThrottleTimeout = setTimeout(_this.onMutation.bind(_this), 50);
                }
            });
            this.mutationObserver.observe(this.el, { subtree: true, childList: true });
        }
        if (this.scrollEvents && this.scrollEvents instanceof core.EventEmitter) {
            var /** @type {?} */ scrollSubscription = this.scrollEvents.subscribe(function (event) { return _this.handleEvent(event); });
            this.interactionSubscriptions.add(scrollSubscription);
        }
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.ngOnDestroy = function () {
        this.interactionSubscriptions.unsubscribe();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SlimScrollDirective.prototype.handleEvent = function (e) {
        if (e.type === 'scrollToBottom') {
            var /** @type {?} */ y = this.el.scrollHeight - this.el.clientHeight;
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollToTop') {
            var /** @type {?} */ y = 0;
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollToPercent' && (e.percent >= 0 && e.percent <= 100)) {
            var /** @type {?} */ y = Math.round(((this.el.scrollHeight - this.el.clientHeight) / 100) * e.percent);
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollTo') {
            var /** @type {?} */ y = e.y;
            if (y <= this.el.scrollHeight - this.el.clientHeight && y >= 0) {
                this.scrollTo(y, e.duration, e.easing);
            }
        }
        else if (e.type === 'recalculate') {
            this.getBarHeight();
        }
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.setElementStyle = function () {
        var /** @type {?} */ el = this.el;
        this.renderer.setElementStyle(el, 'overflow', 'hidden');
        this.renderer.setElementStyle(el, 'position', 'relative');
        this.renderer.setElementStyle(el, 'display', 'block');
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.onMutation = function () {
        this.getBarHeight();
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.wrapContainer = function () {
        this.wrapper = this.renderer.createElement(this.el, 'div');
        var /** @type {?} */ wrapper = this.wrapper;
        var /** @type {?} */ el = this.el;
        this.renderer.setElementClass(wrapper, 'slimscroll-wrapper', true);
        this.renderer.setElementStyle(wrapper, 'position', 'relative');
        this.renderer.setElementStyle(wrapper, 'overflow', 'hidden');
        this.renderer.setElementStyle(wrapper, 'display', 'inline-block');
        this.renderer.setElementStyle(wrapper, 'margin', getComputedStyle(el).margin);
        this.renderer.setElementStyle(wrapper, 'width', '100%');
        this.renderer.setElementStyle(wrapper, 'height', getComputedStyle(el).height);
        el.parentNode.insertBefore(wrapper, el);
        wrapper.appendChild(el);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.initGrid = function () {
        this.grid = this.renderer.createElement(this.el, 'div');
        var /** @type {?} */ grid = this.grid;
        this.renderer.setElementClass(grid, 'slimscroll-grid', true);
        this.renderer.setElementStyle(grid, 'position', 'absolute');
        this.renderer.setElementStyle(grid, 'top', '0');
        this.renderer.setElementStyle(grid, 'bottom', '0');
        this.renderer.setElementStyle(grid, this.options.position, '0');
        this.renderer.setElementStyle(grid, 'width', this.options.gridWidth + "px");
        this.renderer.setElementStyle(grid, 'background', this.options.gridBackground);
        this.renderer.setElementStyle(grid, 'opacity', this.options.gridOpacity);
        this.renderer.setElementStyle(grid, 'display', 'block');
        this.renderer.setElementStyle(grid, 'cursor', 'pointer');
        this.renderer.setElementStyle(grid, 'z-index', '99');
        this.renderer.setElementStyle(grid, 'border-radius', this.options.gridBorderRadius + "px");
        this.renderer.setElementStyle(grid, 'margin', this.options.gridMargin);
        this.wrapper.appendChild(grid);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.initBar = function () {
        this.bar = this.renderer.createElement(this.el, 'div');
        var /** @type {?} */ bar = this.bar;
        this.renderer.setElementClass(bar, 'slimscroll-bar', true);
        this.renderer.setElementStyle(bar, 'position', 'absolute');
        this.renderer.setElementStyle(bar, 'top', '0');
        this.renderer.setElementStyle(bar, this.options.position, '0');
        this.renderer.setElementStyle(bar, 'width', this.options.barWidth + "px");
        this.renderer.setElementStyle(bar, 'background', this.options.barBackground);
        this.renderer.setElementStyle(bar, 'opacity', this.options.barOpacity);
        this.renderer.setElementStyle(bar, 'display', 'block');
        this.renderer.setElementStyle(bar, 'cursor', 'pointer');
        this.renderer.setElementStyle(bar, 'z-index', '100');
        this.renderer.setElementStyle(bar, 'border-radius', this.options.barBorderRadius + "px");
        this.renderer.setElementStyle(bar, 'margin', this.options.barMargin);
        this.wrapper.appendChild(bar);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.getBarHeight = function () {
        var /** @type {?} */ barHeight = Math.max((this.el.offsetHeight / this.el.scrollHeight) * this.el.offsetHeight, 30) + 'px';
        var /** @type {?} */ display = parseInt(barHeight, 10) === this.el.offsetHeight ? 'none' : 'block';
        this.renderer.setElementStyle(this.bar, 'height', barHeight);
        this.renderer.setElementStyle(this.bar, 'display', display);
        this.renderer.setElementStyle(this.grid, 'display', display);
    };
    /**
     * @param {?} y
     * @param {?} duration
     * @param {?} easingFunc
     * @return {?}
     */
    SlimScrollDirective.prototype.scrollTo = function (y, duration, easingFunc) {
        var _this = this;
        var /** @type {?} */ start = Date.now();
        var /** @type {?} */ from = this.el.scrollTop;
        var /** @type {?} */ maxTop = this.el.offsetHeight - this.bar.offsetHeight;
        var /** @type {?} */ maxElScrollTop = this.el.scrollHeight - this.el.clientHeight;
        var /** @type {?} */ barHeight = Math.max((this.el.offsetHeight / this.el.scrollHeight) * this.el.offsetHeight, 30);
        var /** @type {?} */ paddingTop = parseInt(this.el.style.paddingTop, 10) || 0;
        var /** @type {?} */ paddingBottom = parseInt(this.el.style.paddingBottom, 10) || 0;
        var /** @type {?} */ scroll = function (timestamp) {
            var /** @type {?} */ currentTime = Date.now();
            var /** @type {?} */ time = Math.min(1, ((currentTime - start) / duration));
            var /** @type {?} */ easedTime = easing[easingFunc](time);
            if (paddingTop > 0 || paddingBottom > 0) {
                var /** @type {?} */ fromY = null;
                if (paddingTop > 0) {
                    fromY = -paddingTop;
                    fromY = -((easedTime * (y - fromY)) + fromY);
                    _this.renderer.setElementStyle(_this.el, 'paddingTop', fromY + "px");
                }
                if (paddingBottom > 0) {
                    fromY = paddingBottom;
                    fromY = ((easedTime * (y - fromY)) + fromY);
                    _this.renderer.setElementStyle(_this.el, 'paddingBottom', fromY + "px");
                }
            }
            else {
                _this.el.scrollTop = (easedTime * (y - from)) + from;
            }
            var /** @type {?} */ percentScroll = _this.el.scrollTop / maxElScrollTop;
            if (paddingBottom === 0) {
                var /** @type {?} */ delta = Math.round(Math.round(_this.el.clientHeight * percentScroll) - barHeight);
                if (delta > 0) {
                    _this.renderer.setElementStyle(_this.bar, 'top', delta + "px");
                }
            }
            if (time < 1) {
                requestAnimationFrame(scroll);
            }
        };
        requestAnimationFrame(scroll);
    };
    /**
     * @param {?} y
     * @param {?} isWheel
     * @param {?} isJump
     * @return {?}
     */
    SlimScrollDirective.prototype.scrollContent = function (y, isWheel, isJump) {
        var _this = this;
        var /** @type {?} */ delta = y;
        var /** @type {?} */ maxTop = this.el.offsetHeight - this.bar.offsetHeight;
        var /** @type {?} */ percentScroll;
        var /** @type {?} */ over = null;
        if (isWheel) {
            delta = parseInt(getComputedStyle(this.bar).top, 10) + y * 20 / 100 * this.bar.offsetHeight;
            if (delta < 0 || delta > maxTop) {
                over = delta > maxTop ? delta - maxTop : delta;
            }
            delta = Math.min(Math.max(delta, 0), maxTop);
            delta = (y > 0) ? Math.ceil(delta) : Math.floor(delta);
            this.renderer.setElementStyle(this.bar, 'top', delta + 'px');
        }
        percentScroll = parseInt(getComputedStyle(this.bar).top, 10) / (this.el.offsetHeight - this.bar.offsetHeight);
        delta = percentScroll * (this.el.scrollHeight - this.el.offsetHeight);
        this.el.scrollTop = delta;
        this.showBarAndGrid();
        if (!this.options.alwaysVisible) {
            if (this.visibleTimeout) {
                clearTimeout(this.visibleTimeout);
            }
            this.visibleTimeout = setTimeout(function () {
                _this.hideBarAndGrid();
            }, this.options.visibleTimeout);
        }
        return over;
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.showBarAndGrid = function () {
        this.renderer.setElementStyle(this.grid, 'background', this.options.gridBackground);
        this.renderer.setElementStyle(this.bar, 'background', this.options.barBackground);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.hideBarAndGrid = function () {
        this.renderer.setElementStyle(this.grid, 'background', 'transparent');
        this.renderer.setElementStyle(this.bar, 'background', 'transparent');
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.destroy = function () {
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = null;
        }
        if (this.el.parentElement.classList.contains('slimscroll-wrapper')) {
            var /** @type {?} */ wrapper = this.el.parentElement;
            var /** @type {?} */ bar = this.el.querySelector('.slimscroll-bar');
            this.el.removeChild(bar);
            this.unwrap(wrapper);
        }
    };
    /**
     * @param {?} wrapper
     * @return {?}
     */
    SlimScrollDirective.prototype.unwrap = function (wrapper) {
        var /** @type {?} */ docFrag = document.createDocumentFragment();
        while (wrapper.firstChild) {
            var /** @type {?} */ child = wrapper.removeChild(wrapper.firstChild);
            docFrag.appendChild(child);
        }
        wrapper.parentNode.replaceChild(docFrag, wrapper);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SlimScrollDirective.prototype.onResize = function ($event) {
        this.getBarHeight();
    };
    return SlimScrollDirective;
}());
SlimScrollDirective.decorators = [
    { type: core.Directive, args: [{
                selector: '[slimScroll]',
                exportAs: 'slimScroll'
            },] },
];
/**
 * @nocollapse
 */
SlimScrollDirective.ctorParameters = function () {
    return [
        { type: core.ViewContainerRef, decorators: [{ type: core.Inject, args: [core.ViewContainerRef,] },] },
        { type: core.Renderer, decorators: [{ type: core.Inject, args: [core.Renderer,] },] },
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },
    ];
};
SlimScrollDirective.propDecorators = {
    'options': [{ type: core.Input },],
    'scrollEvents': [{ type: core.Input },],
    'onResize': [{ type: core.HostListener, args: ['window:resize', ['$event'],] },],
};
var NgSlimScrollModule = (function () {
    function NgSlimScrollModule() {
    }
    return NgSlimScrollModule;
}());
NgSlimScrollModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    SlimScrollDirective
                ],
                exports: [
                    SlimScrollDirective
                ]
            },] },
];
/**
 * @nocollapse
 */
NgSlimScrollModule.ctorParameters = function () { return []; };
/**
 * Internal library helper that helps to check if value is empty
 * @param value
 */
var isNil = function (value) {
    return (typeof value === 'undefined') || (value === null);
};
var NgDatepickerComponent = /** @class */ (function () {
    /**
     * @param {?} elementRef
     */
    function NgDatepickerComponent(elementRef) {
        this.elementRef = elementRef;
        /**
         * Disable datepicker's input
         */
        this.headless = false;
        /**
         * Set datepicker's visibility state
         */
        this.isOpened = false;
        /**
         * Datepicker dropdown position
         */
        this.position = 'bottom-right';
        this.positions = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
        this.onTouchedCallback = function () { };
        this.onChangeCallback = function () { };
        this.scrollOptions = {
            barBackground: '#DFE3E9',
            gridBackground: '#FFFFFF',
            barBorderRadius: '3',
            gridBorderRadius: '3',
            barWidth: '6',
            gridWidth: '6',
            barMargin: '0',
            gridMargin: '0'
        };
    }
    Object.defineProperty(NgDatepickerComponent.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this.innerValue;
        },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            this.innerValue = val;
            this.onChangeCallback(this.innerValue);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgDatepickerComponent.prototype.ngOnInit = function () {
        this.view = 'days';
        this.date = new Date();
        this.setOptions();
        this.initDayNames();
        this.initYears();
        // Check if 'position' property is correct
        if (this.positions.indexOf(this.position) === -1) {
            throw new TypeError("ng-datepicker: invalid position property value '" + this.position + "' (expected: " + this.positions.join(', ') + ")");
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgDatepickerComponent.prototype.ngOnChanges = function (changes) {
        if ('options' in changes) {
            this.setOptions();
            this.initDayNames();
            this.init();
            this.initYears();
        }
    };
    /**
     * @return {?}
     */
    NgDatepickerComponent.prototype.setOptions = function () {
        var /** @type {?} */ today = new Date(); // this const was added because during my tests, I noticed that at this level this.date is undefined
        this.minYear = this.options && this.options.minYear || dateFns.getYear(today) - 30;
        this.maxYear = this.options && this.options.maxYear || dateFns.getYear(today) + 30;
        this.displayFormat = this.options && this.options.displayFormat || 'MMM D[,] YYYY';
        this.barTitleFormat = this.options && this.options.barTitleFormat || 'MMMM YYYY';
        this.dayNamesFormat = this.options && this.options.dayNamesFormat || 'ddd';
        this.barTitleIfEmpty = this.options && this.options.barTitleIfEmpty || 'Click to select a date';
        this.firstCalendarDay = this.options && this.options.firstCalendarDay || 0;
        this.locale = this.options && { locale: this.options.locale } || {};
    };
    /**
     * @return {?}
     */
    NgDatepickerComponent.prototype.nextMonth = function () {
        this.date = dateFns.addMonths(this.date, 1);
        this.init();
    };
    /**
     * @return {?}
     */
    NgDatepickerComponent.prototype.prevMonth = function () {
        this.date = dateFns.subMonths(this.date, 1);
        this.init();
    };
    /**
     * @param {?} i
     * @return {?}
     */
    NgDatepickerComponent.prototype.setDate = function (i) {
        this.date = this.days[i].date;
        this.value = this.date;
        this.init();
        this.close();
    };
    /**
     * @param {?} i
     * @return {?}
     */
    NgDatepickerComponent.prototype.setYear = function (i) {
        this.date = dateFns.setYear(this.date, this.years[i].year);
        this.init();
        this.initYears();
        this.view = 'days';
    };
    /**
     * Checks if specified date is in range of min and max dates
     * @param {?} date
     * @return {?}
     */
    NgDatepickerComponent.prototype.isDateSelectable = function (date) {
        if (isNil(this.options)) {
            return true;
        }
        var /** @type {?} */ minDateSet = !isNil(this.options.minDate);
        var /** @type {?} */ maxDateSet = !isNil(this.options.maxDate);
        var /** @type {?} */ timestamp = date.valueOf();
        if (minDateSet && (timestamp < this.options.minDate.valueOf())) {
            return false;
        }
        if (maxDateSet && (timestamp > this.options.maxDate.valueOf())) {
            return false;
        }
        return true;
    };
    /**
     * @return {?}
     */
    NgDatepickerComponent.prototype.init = function () {
        var _this = this;
        var /** @type {?} */ start = dateFns.startOfMonth(this.date);
        var /** @type {?} */ end = dateFns.endOfMonth(this.date);
        this.days = dateFns.eachDay(start, end).map(function (date) {
            return {
                date: date,
                day: dateFns.getDate(date),
                month: dateFns.getMonth(date),
                year: dateFns.getYear(date),
                inThisMonth: true,
                isToday: dateFns.isToday(date),
                isSelected: dateFns.isSameDay(date, _this.innerValue) && dateFns.isSameMonth(date, _this.innerValue) && dateFns.isSameYear(date, _this.innerValue),
                isSelectable: _this.isDateSelectable(date)
            };
        });
        var /** @type {?} */ tmp = dateFns.getDay(start) - this.firstCalendarDay;
        var /** @type {?} */ prevDays = tmp < 0 ? 7 - this.firstCalendarDay : tmp;
        for (var /** @type {?} */ i = 1; i <= prevDays; i++) {
            var /** @type {?} */ date = dateFns.subDays(start, i);
            this.days.unshift({
                date: date,
                day: dateFns.getDate(date),
                month: dateFns.getMonth(date),
                year: dateFns.getYear(date),
                inThisMonth: false,
                isToday: dateFns.isToday(date),
                isSelected: dateFns.isSameDay(date, this.innerValue) && dateFns.isSameMonth(date, this.innerValue) && dateFns.isSameYear(date, this.innerValue),
                isSelectable: this.isDateSelectable(date)
            });
        }
        this.displayValue = this.innerValue ? dateFns.format(this.innerValue, this.displayFormat, this.locale) : '';
        this.barTitle = this.innerValue ? dateFns.format(start, this.barTitleFormat, this.locale) : this.barTitleIfEmpty;
    };
    /**
     * @return {?}
     */
    NgDatepickerComponent.prototype.initYears = function () {
        var _this = this;
        var /** @type {?} */ range = this.maxYear - this.minYear;
        this.years = Array.from(new Array(range), function (x, i) { return i + _this.minYear; }).map(function (year) {
            return { year: year, isThisYear: year === dateFns.getYear(_this.date) };
        });
    };
    /**
     * @return {?}
     */
    NgDatepickerComponent.prototype.initDayNames = function () {
        this.dayNames = [];
        var /** @type {?} */ start = this.firstCalendarDay;
        for (var /** @type {?} */ i = start; i <= 6 + start; i++) {
            var /** @type {?} */ date = dateFns.setDay(new Date(), i);
            this.dayNames.push(dateFns.format(date, this.dayNamesFormat, this.locale));
        }
    };
    /**
     * @return {?}
     */
    NgDatepickerComponent.prototype.toggleView = function () {
        this.view = this.view === 'days' ? 'years' : 'days';
    };
    /**
     * @return {?}
     */
    NgDatepickerComponent.prototype.toggle = function () {
        this.isOpened = !this.isOpened;
    };
    /**
     * @return {?}
     */
    NgDatepickerComponent.prototype.close = function () {
        this.isOpened = false;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    NgDatepickerComponent.prototype.writeValue = function (val) {
        if (val) {
            this.date = val;
            this.innerValue = val;
            this.init();
            this.displayValue = dateFns.format(this.innerValue, this.displayFormat, this.locale);
            this.barTitle = dateFns.format(dateFns.startOfMonth(val), this.barTitleFormat, this.locale);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgDatepickerComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgDatepickerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgDatepickerComponent.prototype.onBlur = function (e) {
        if (!this.isOpened) {
            return;
        }
        var /** @type {?} */ input = this.elementRef.nativeElement.querySelector('.ngx-datepicker-input');
        if (input == null) {
            return;
        }
        if (e.target === input || input.contains(/** @type {?} */ (e.target))) {
            return;
        }
        var /** @type {?} */ container = this.elementRef.nativeElement.querySelector('.ngx-datepicker-calendar-container');
        if (container && container !== e.target && !container.contains(/** @type {?} */ (e.target)) && !((e.target)).classList.contains('year-unit')) {
            this.close();
        }
    };
    return NgDatepickerComponent;
}());
NgDatepickerComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'ng-datepicker',
                template: "\n    <div class=\"ngx-datepicker-container\">\n      <input type=\"text\" *ngIf=\"!headless\" class=\"ngx-datepicker-input\" [(ngModel)]=\"displayValue\" readonly (click)=\"toggle()\">\n      <ng-content></ng-content>\n      <div class=\"ngx-datepicker-calendar-container ngx-datepicker-position-{{position}}\" *ngIf=\"isOpened\">\n        <div class=\"topbar-container\">\n          <svg width=\"7px\" height=\"10px\" viewBox=\"0 0 7 10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" (click)=\"prevMonth()\">\n            <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n              <g transform=\"translate(-923.000000, -1882.000000)\" fill=\"#CED0DA\">\n                <g transform=\"translate(80.000000, 1361.000000)\">\n                  <g transform=\"translate(0.000000, 430.000000)\">\n                    <g transform=\"translate(825.000000, 0.000000)\">\n                      <g transform=\"translate(0.000000, 72.000000)\">\n                        <g transform=\"translate(18.000000, 15.000000)\">\n                          <polygon id=\"Back\" points=\"6.015 4 0 9.013 6.015 14.025\"></polygon>\n                        </g>\n                      </g>\n                    </g>\n                  </g>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <span class=\"topbar-title\" (click)=\"toggleView()\">{{ barTitle }}</span>\n          <svg width=\"7px\" height=\"10px\" viewBox=\"0 0 6 10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" (click)=\"nextMonth()\">\n            <g id=\"Source-Sans---UI-Elements-Kit\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n              <g id=\"White-Layout\" transform=\"translate(-1182.000000, -1882.000000)\" fill=\"#CED0DA\">\n                <g id=\"Dropdowns-&amp;-Selector\" transform=\"translate(80.000000, 1361.000000)\">\n                  <g id=\"Dropdowns\" transform=\"translate(0.000000, 430.000000)\">\n                    <g id=\"Calendar\" transform=\"translate(825.000000, 0.000000)\">\n                      <g transform=\"translate(0.000000, 72.000000)\" id=\"Top-Bar-Nav\">\n                        <g transform=\"translate(18.000000, 15.000000)\">\n                          <polygon id=\"Forward\" transform=\"translate(262.007500, 9.012500) scale(-1, 1) translate(-262.007500, -9.012500) \" points=\"265.015 4 259 9.013 265.015 14.025\"></polygon>\n                        </g>\n                      </g>\n                    </g>\n                  </g>\n                </g>\n              </g>\n            </g>\n          </svg>\n        </div>\n        <div class=\"main-calendar-container\" *ngIf=\"view === 'days'\">\n          <div class=\"main-calendar-day-names\">\n            <span class=\"day-name-unit\" *ngFor=\"let name of dayNames\">{{ name }}</span>\n          </div>\n          <div class=\"main-calendar-days\">\n            <span\n              class=\"day-unit\"\n              *ngFor=\"let day of days; let i = index;\"\n              [ngClass]=\"{ 'is-prev-month': !day.inThisMonth, 'is-today': day.isToday, 'is-selected': day.isSelected, 'is-disabled': !day.isSelectable }\"\n              (click)=\"day.isSelectable && setDate(i)\"\n            >\n              {{ day.day }}\n            </span>\n          </div>\n        </div>\n        <div class=\"main-calendar-container\" *ngIf=\"view === 'years'\">\n          <div class=\"main-calendar-years\" slimScroll [options]=\"scrollOptions\">\n            <span class=\"year-unit\" *ngFor=\"let year of years; let i = index;\" [ngClass]=\"{ 'is-selected': year.isThisYear }\" (click)=\"setYear(i)\">{{ year.year }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
                styles: ["\n    .ngx-datepicker-position-bottom-left {\n      top: 40px;\n      right: 0; }\n\n    .ngx-datepicker-position-bottom-right {\n      top: 40px;\n      left: 0; }\n\n    .ngx-datepicker-position-top-left {\n      bottom: 40px;\n      right: 0; }\n\n    .ngx-datepicker-position-top-right {\n      bottom: 40px;\n      left: 0; }\n\n    .ngx-datepicker-container {\n      position: relative; }\n      .ngx-datepicker-container .ngx-datepicker-input {\n        padding: 5px 10px;\n        font-size: 14px;\n        width: 200px;\n        outline: none;\n        border: 1px solid #DFE3E9; }\n      .ngx-datepicker-container .ngx-datepicker-calendar-container {\n        position: absolute;\n        width: 300px;\n        background: #ffffff;\n        -webkit-box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.08);\n                box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.08);\n        border: 1px solid #DFE3E9;\n        border-radius: 4px; }\n        .ngx-datepicker-container .ngx-datepicker-calendar-container .topbar-container {\n          width: 100%;\n          height: 50px;\n          padding: 15px;\n          border-bottom: 1px solid #DFE3E9;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex;\n          -webkit-box-pack: justify;\n              -ms-flex-pack: justify;\n                  justify-content: space-between;\n          -webkit-box-align: center;\n              -ms-flex-align: center;\n                  align-items: center;\n          -webkit-user-select: none;\n             -moz-user-select: none;\n              -ms-user-select: none;\n                  user-select: none; }\n          .ngx-datepicker-container .ngx-datepicker-calendar-container .topbar-container svg {\n            cursor: pointer; }\n            .ngx-datepicker-container .ngx-datepicker-calendar-container .topbar-container svg g {\n              fill: #CED0DA; }\n          .ngx-datepicker-container .ngx-datepicker-calendar-container .topbar-container .topbar-title {\n            color: #3D495C;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer; }\n        .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container {\n          width: 100%;\n          height: 100%;\n          padding: 15px 10px 0;\n          font-size: 12px;\n          font-weight: 500; }\n          .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-day-names {\n            color: #A4A9B1;\n            width: 100%;\n            display: -webkit-box;\n            display: -ms-flexbox;\n            display: flex;\n            -webkit-box-align: center;\n                -ms-flex-align: center;\n                    align-items: center; }\n            .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-day-names .day-name-unit {\n              width: calc(100% / 7);\n              text-transform: uppercase;\n              text-align: center; }\n          .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years {\n            padding: 15px 0;\n            width: 100%;\n            display: inline-block;\n            max-height: 275px;\n            overflow: hidden; }\n            .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit {\n              width: calc(100% / 7);\n              height: 40px;\n              display: -webkit-inline-box;\n              display: -ms-inline-flexbox;\n              display: inline-flex;\n              float: left;\n              -webkit-box-align: center;\n                  -ms-flex-align: center;\n                      align-items: center;\n              -webkit-box-pack: center;\n                  -ms-flex-pack: center;\n                      justify-content: center;\n              cursor: pointer;\n              -webkit-user-select: none;\n                 -moz-user-select: none;\n                  -ms-user-select: none;\n                      user-select: none;\n              border-radius: 50%;\n              color: #3D495C; }\n              .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit.is-prev-month, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit.is-prev-month, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit.is-prev-month, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit.is-prev-month {\n                color: #A4A9B1; }\n              .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit.is-today, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit.is-today, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit.is-today, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit.is-today {\n                background: #A4A9B1;\n                color: #ffffff; }\n              .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit.is-selected, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit.is-selected, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit.is-selected, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit.is-selected {\n                background: #1A91EB;\n                color: #ffffff; }\n              .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit.is-disabled, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit.is-disabled, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit.is-disabled, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit.is-disabled {\n                cursor: not-allowed;\n                color: #A4A9B1; }\n                .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .day-unit.is-disabled:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-days .year-unit.is-disabled:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .day-unit.is-disabled:hover, .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit.is-disabled:hover {\n                  background: transparent; }\n          .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years {\n            height: 210px;\n            display: block;\n            padding: 0; }\n            .ngx-datepicker-container .ngx-datepicker-calendar-container .main-calendar-container .main-calendar-years .year-unit {\n              width: calc(100% / 3);\n              border-radius: 10px; }\n  "],
                providers: [
                    { provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return NgDatepickerComponent; }), multi: true }
                ]
            },] },
];
/**
 * @nocollapse
 */
NgDatepickerComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
]; };
NgDatepickerComponent.propDecorators = {
    'options': [{ type: core.Input },],
    'headless': [{ type: core.Input },],
    'isOpened': [{ type: core.Input },],
    'position': [{ type: core.Input },],
    'onBlur': [{ type: core.HostListener, args: ['document:click', ['$event'],] },],
};
var NgDatepickerModule = /** @class */ (function () {
    function NgDatepickerModule() {
    }
    return NgDatepickerModule;
}());
NgDatepickerModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [NgDatepickerComponent],
                imports: [common.CommonModule, forms.FormsModule, NgSlimScrollModule],
                exports: [NgDatepickerComponent, common.CommonModule, forms.FormsModule, NgSlimScrollModule]
            },] },
];
/**
 * @nocollapse
 */
NgDatepickerModule.ctorParameters = function () { return []; };

exports.NgDatepickerModule = NgDatepickerModule;
exports.NgDatepickerComponent = NgDatepickerComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng2-datepicker.umd.js.map
